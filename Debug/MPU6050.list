
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c24  08003c24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c2c  08003c2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08003c40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003c40  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6f0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175d  00000000  00000000  0002a76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000757  00000000  00000000  0002c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020755  00000000  00000000  0002cf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000caf4  00000000  00000000  0004d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6be2  00000000  00000000  0005a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027e4  00000000  00000000  00120da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00123588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003bf4 	.word	0x08003bf4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003bf4 	.word	0x08003bf4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b970 	b.w	8000d3c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	460d      	mov	r5, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	460f      	mov	r7, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4694      	mov	ip, r2
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0xe2>
 8000a8a:	fab2 f382 	clz	r3, r2
 8000a8e:	b143      	cbz	r3, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a94:	f1c3 0220 	rsb	r2, r3, #32
 8000a98:	409f      	lsls	r7, r3
 8000a9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a9e:	4317      	orrs	r7, r2
 8000aa0:	409c      	lsls	r4, r3
 8000aa2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aa6:	fa1f f58c 	uxth.w	r5, ip
 8000aaa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aae:	0c22      	lsrs	r2, r4, #16
 8000ab0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ab4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ab8:	fb01 f005 	mul.w	r0, r1, r5
 8000abc:	4290      	cmp	r0, r2
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ac8:	f080 811c 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000acc:	4290      	cmp	r0, r2
 8000ace:	f240 8119 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	4462      	add	r2, ip
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	b2a4      	uxth	r4, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae6:	fb00 f505 	mul.w	r5, r0, r5
 8000aea:	42a5      	cmp	r5, r4
 8000aec:	d90a      	bls.n	8000b04 <__udivmoddi4+0x90>
 8000aee:	eb1c 0404 	adds.w	r4, ip, r4
 8000af2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af6:	f080 8107 	bcs.w	8000d08 <__udivmoddi4+0x294>
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	f240 8104 	bls.w	8000d08 <__udivmoddi4+0x294>
 8000b00:	4464      	add	r4, ip
 8000b02:	3802      	subs	r0, #2
 8000b04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b08:	1b64      	subs	r4, r4, r5
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11e      	cbz	r6, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40dc      	lsrs	r4, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	e9c6 4300 	strd	r4, r3, [r6]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0xbc>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80ed 	beq.w	8000cfe <__udivmoddi4+0x28a>
 8000b24:	2100      	movs	r1, #0
 8000b26:	e9c6 0500 	strd	r0, r5, [r6]
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b30:	fab3 f183 	clz	r1, r3
 8000b34:	2900      	cmp	r1, #0
 8000b36:	d149      	bne.n	8000bcc <__udivmoddi4+0x158>
 8000b38:	42ab      	cmp	r3, r5
 8000b3a:	d302      	bcc.n	8000b42 <__udivmoddi4+0xce>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	f200 80f8 	bhi.w	8000d32 <__udivmoddi4+0x2be>
 8000b42:	1a84      	subs	r4, r0, r2
 8000b44:	eb65 0203 	sbc.w	r2, r5, r3
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4617      	mov	r7, r2
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d0e2      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	e9c6 4700 	strd	r4, r7, [r6]
 8000b54:	e7df      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b56:	b902      	cbnz	r2, 8000b5a <__udivmoddi4+0xe6>
 8000b58:	deff      	udf	#255	; 0xff
 8000b5a:	fab2 f382 	clz	r3, r2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8090 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b64:	1a8a      	subs	r2, r1, r2
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fa1f fe8c 	uxth.w	lr, ip
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b74:	fb07 2015 	mls	r0, r7, r5, r2
 8000b78:	0c22      	lsrs	r2, r4, #16
 8000b7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b7e:	fb0e f005 	mul.w	r0, lr, r5
 8000b82:	4290      	cmp	r0, r2
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b86:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4290      	cmp	r0, r2
 8000b92:	f200 80cb 	bhi.w	8000d2c <__udivmoddi4+0x2b8>
 8000b96:	4645      	mov	r5, r8
 8000b98:	1a12      	subs	r2, r2, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ba4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x14e>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb8:	d202      	bcs.n	8000bc0 <__udivmoddi4+0x14c>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f200 80bb 	bhi.w	8000d36 <__udivmoddi4+0x2c2>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	eba4 040e 	sub.w	r4, r4, lr
 8000bc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bca:	e79f      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bcc:	f1c1 0720 	rsb	r7, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bda:	fa05 f401 	lsl.w	r4, r5, r1
 8000bde:	fa20 f307 	lsr.w	r3, r0, r7
 8000be2:	40fd      	lsrs	r5, r7
 8000be4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be8:	4323      	orrs	r3, r4
 8000bea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bee:	fa1f fe8c 	uxth.w	lr, ip
 8000bf2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bf6:	0c1c      	lsrs	r4, r3, #16
 8000bf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bfc:	fb08 f50e 	mul.w	r5, r8, lr
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	fa00 f001 	lsl.w	r0, r0, r1
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c14:	f080 8088 	bcs.w	8000d28 <__udivmoddi4+0x2b4>
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	f240 8085 	bls.w	8000d28 <__udivmoddi4+0x2b4>
 8000c1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c22:	4464      	add	r4, ip
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	b29d      	uxth	r5, r3
 8000c28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c44:	d26c      	bcs.n	8000d20 <__udivmoddi4+0x2ac>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	d96a      	bls.n	8000d20 <__udivmoddi4+0x2ac>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	4464      	add	r4, ip
 8000c4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c52:	fba3 9502 	umull	r9, r5, r3, r2
 8000c56:	eba4 040e 	sub.w	r4, r4, lr
 8000c5a:	42ac      	cmp	r4, r5
 8000c5c:	46c8      	mov	r8, r9
 8000c5e:	46ae      	mov	lr, r5
 8000c60:	d356      	bcc.n	8000d10 <__udivmoddi4+0x29c>
 8000c62:	d053      	beq.n	8000d0c <__udivmoddi4+0x298>
 8000c64:	b156      	cbz	r6, 8000c7c <__udivmoddi4+0x208>
 8000c66:	ebb0 0208 	subs.w	r2, r0, r8
 8000c6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c72:	40ca      	lsrs	r2, r1
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	4317      	orrs	r7, r2
 8000c78:	e9c6 7400 	strd	r7, r4, [r6]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	f1c3 0120 	rsb	r1, r3, #32
 8000c88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c90:	fa25 f101 	lsr.w	r1, r5, r1
 8000c94:	409d      	lsls	r5, r3
 8000c96:	432a      	orrs	r2, r5
 8000c98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ca8:	0c11      	lsrs	r1, r2, #16
 8000caa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cae:	fb00 f50e 	mul.w	r5, r0, lr
 8000cb2:	428d      	cmp	r5, r1
 8000cb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x258>
 8000cba:	eb1c 0101 	adds.w	r1, ip, r1
 8000cbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc2:	d22f      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc4:	428d      	cmp	r5, r1
 8000cc6:	d92d      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	4461      	add	r1, ip
 8000ccc:	1b49      	subs	r1, r1, r5
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce0:	4291      	cmp	r1, r2
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x282>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cec:	d216      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000cee:	4291      	cmp	r1, r2
 8000cf0:	d914      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000cf2:	3d02      	subs	r5, #2
 8000cf4:	4462      	add	r2, ip
 8000cf6:	1a52      	subs	r2, r2, r1
 8000cf8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cfc:	e738      	b.n	8000b70 <__udivmoddi4+0xfc>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	4630      	mov	r0, r6
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000d04:	4639      	mov	r1, r7
 8000d06:	e6e6      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	e6fb      	b.n	8000b04 <__udivmoddi4+0x90>
 8000d0c:	4548      	cmp	r0, r9
 8000d0e:	d2a9      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d10:	ebb9 0802 	subs.w	r8, r9, r2
 8000d14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	e7a3      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1c:	4645      	mov	r5, r8
 8000d1e:	e7ea      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d20:	462b      	mov	r3, r5
 8000d22:	e794      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d24:	4640      	mov	r0, r8
 8000d26:	e7d1      	b.n	8000ccc <__udivmoddi4+0x258>
 8000d28:	46d0      	mov	r8, sl
 8000d2a:	e77b      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2c:	3d02      	subs	r5, #2
 8000d2e:	4462      	add	r2, ip
 8000d30:	e732      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d32:	4608      	mov	r0, r1
 8000d34:	e70a      	b.n	8000b4c <__udivmoddi4+0xd8>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e742      	b.n	8000bc2 <__udivmoddi4+0x14e>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	2275      	movs	r2, #117	; 0x75
 8000d58:	21d0      	movs	r1, #208	; 0xd0
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MPU6050_Init+0xa8>)
 8000d5c:	f001 f8f2 	bl	8001f44 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b68      	cmp	r3, #104	; 0x68
 8000d64:	d13b      	bne.n	8000dde <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	1dbb      	adds	r3, r7, #6
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	226b      	movs	r2, #107	; 0x6b
 8000d7c:	21d0      	movs	r1, #208	; 0xd0
 8000d7e:	481a      	ldr	r0, [pc, #104]	; (8000de8 <MPU6050_Init+0xa8>)
 8000d80:	f000 ffe6 	bl	8001d50 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000d84:	2307      	movs	r3, #7
 8000d86:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	1dbb      	adds	r3, r7, #6
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	2219      	movs	r2, #25
 8000d9a:	21d0      	movs	r1, #208	; 0xd0
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MPU6050_Init+0xa8>)
 8000d9e:	f000 ffd7 	bl	8001d50 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000da2:	2300      	movs	r3, #0
 8000da4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2301      	movs	r3, #1
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	1dbb      	adds	r3, r7, #6
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	221c      	movs	r2, #28
 8000db8:	21d0      	movs	r1, #208	; 0xd0
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <MPU6050_Init+0xa8>)
 8000dbc:	f000 ffc8 	bl	8001d50 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	1dbb      	adds	r3, r7, #6
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	221b      	movs	r2, #27
 8000dd6:	21d0      	movs	r1, #208	; 0xd0
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MPU6050_Init+0xa8>)
 8000dda:	f000 ffb9 	bl	8001d50 <HAL_I2C_Mem_Write>
	}

}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000028 	.word	0x20000028

08000dec <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2306      	movs	r3, #6
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	223b      	movs	r2, #59	; 0x3b
 8000e04:	21d0      	movs	r1, #208	; 0xd0
 8000e06:	482f      	ldr	r0, [pc, #188]	; (8000ec4 <MPU6050_Read_Accel+0xd8>)
 8000e08:	f001 f89c 	bl	8001f44 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000e0c:	783b      	ldrb	r3, [r7, #0]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	787b      	ldrb	r3, [r7, #1]
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MPU6050_Read_Accel+0xdc>)
 8000e1c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000e1e:	78bb      	ldrb	r3, [r7, #2]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MPU6050_Read_Accel+0xe0>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000e30:	793b      	ldrb	r3, [r7, #4]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	797b      	ldrb	r3, [r7, #5]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MPU6050_Read_Accel+0xe4>)
 8000e40:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MPU6050_Read_Accel+0xdc>)
 8000e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb2f 	bl	80004ac <__aeabi_i2d>
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MPU6050_Read_Accel+0xe8>)
 8000e54:	f7ff fcbe 	bl	80007d4 <__aeabi_ddiv>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fda0 	bl	80009a4 <__aeabi_d2f>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <MPU6050_Read_Accel+0xec>)
 8000e68:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MPU6050_Read_Accel+0xe0>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb1b 	bl	80004ac <__aeabi_i2d>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MPU6050_Read_Accel+0xe8>)
 8000e7c:	f7ff fcaa 	bl	80007d4 <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fd8c 	bl	80009a4 <__aeabi_d2f>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a13      	ldr	r2, [pc, #76]	; (8000edc <MPU6050_Read_Accel+0xf0>)
 8000e90:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MPU6050_Read_Accel+0xe4>)
 8000e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb07 	bl	80004ac <__aeabi_i2d>
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MPU6050_Read_Accel+0xe8>)
 8000ea4:	f7ff fc96 	bl	80007d4 <__aeabi_ddiv>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fd78 	bl	80009a4 <__aeabi_d2f>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <MPU6050_Read_Accel+0xf4>)
 8000eb8:	6013      	str	r3, [r2, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000028 	.word	0x20000028
 8000ec8:	200000c0 	.word	0x200000c0
 8000ecc:	200000c2 	.word	0x200000c2
 8000ed0:	200000c4 	.word	0x200000c4
 8000ed4:	40d00000 	.word	0x40d00000
 8000ed8:	200000cc 	.word	0x200000cc
 8000edc:	200000d0 	.word	0x200000d0
 8000ee0:	200000d4 	.word	0x200000d4
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	463b      	mov	r3, r7
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	2243      	movs	r2, #67	; 0x43
 8000f00:	21d0      	movs	r1, #208	; 0xd0
 8000f02:	4831      	ldr	r0, [pc, #196]	; (8000fc8 <MPU6050_Read_Gyro+0xe0>)
 8000f04:	f001 f81e 	bl	8001f44 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f08:	783b      	ldrb	r3, [r7, #0]
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	787b      	ldrb	r3, [r7, #1]
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MPU6050_Read_Gyro+0xe4>)
 8000f18:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MPU6050_Read_Gyro+0xe8>)
 8000f2a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000f2c:	793b      	ldrb	r3, [r7, #4]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <MPU6050_Read_Gyro+0xec>)
 8000f3c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <MPU6050_Read_Gyro+0xe4>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fab1 	bl	80004ac <__aeabi_i2d>
 8000f4a:	a31d      	add	r3, pc, #116	; (adr r3, 8000fc0 <MPU6050_Read_Gyro+0xd8>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fc40 	bl	80007d4 <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f7ff fd22 	bl	80009a4 <__aeabi_d2f>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <MPU6050_Read_Gyro+0xf0>)
 8000f64:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MPU6050_Read_Gyro+0xe8>)
 8000f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa9d 	bl	80004ac <__aeabi_i2d>
 8000f72:	a313      	add	r3, pc, #76	; (adr r3, 8000fc0 <MPU6050_Read_Gyro+0xd8>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fc2c 	bl	80007d4 <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd0e 	bl	80009a4 <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <MPU6050_Read_Gyro+0xf4>)
 8000f8c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MPU6050_Read_Gyro+0xec>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fa89 	bl	80004ac <__aeabi_i2d>
 8000f9a:	a309      	add	r3, pc, #36	; (adr r3, 8000fc0 <MPU6050_Read_Gyro+0xd8>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fc18 	bl	80007d4 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fcfa 	bl	80009a4 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <MPU6050_Read_Gyro+0xf8>)
 8000fb4:	6013      	str	r3, [r2, #0]
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	40606000 	.word	0x40606000
 8000fc8:	20000028 	.word	0x20000028
 8000fcc:	200000c6 	.word	0x200000c6
 8000fd0:	200000c8 	.word	0x200000c8
 8000fd4:	200000ca 	.word	0x200000ca
 8000fd8:	200000d8 	.word	0x200000d8
 8000fdc:	200000dc 	.word	0x200000dc
 8000fe0:	200000e0 	.word	0x200000e0

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fa68 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f80e 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f8d2 	bl	8001198 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 f8a6 	bl	8001144 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ff8:	f000 f876 	bl	80010e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000ffc:	f7ff fea0 	bl	8000d40 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_Accel();
 8001000:	f7ff fef4 	bl	8000dec <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001004:	f7ff ff70 	bl	8000ee8 <MPU6050_Read_Gyro>
	  MPU6050_Read_Accel();
 8001008:	e7fa      	b.n	8001000 <main+0x1c>
	...

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2234      	movs	r2, #52	; 0x34
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fdbe 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <SystemClock_Config+0xd4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <SystemClock_Config+0xd4>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <SystemClock_Config+0xd4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <SystemClock_Config+0xd8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <SystemClock_Config+0xd8>)
 800105a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <SystemClock_Config+0xd8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001070:	2301      	movs	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2310      	movs	r3, #16
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001080:	2310      	movs	r3, #16
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001084:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001088:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800108a:	2304      	movs	r3, #4
 800108c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f81e 	bl	80030dc <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010a6:	f000 f8e5 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2102      	movs	r1, #2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fcbe 	bl	8002a48 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010d2:	f000 f8cf 	bl	8001274 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	; 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_I2C1_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x50>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_I2C1_Init+0x58>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_I2C1_Init+0x50>)
 8001106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_I2C1_Init+0x50>)
 8001126:	f000 fccf 	bl	8001ac8 <HAL_I2C_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001130:	f000 f8a0 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000028 	.word	0x20000028
 800113c:	40005400 	.word	0x40005400
 8001140:	000186a0 	.word	0x000186a0

08001144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART2_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800117c:	f002 fa4c 	bl	8003618 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f875 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000007c 	.word	0x2000007c
 8001194:	40004400 	.word	0x40004400

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <MX_GPIO_Init+0xd0>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_GPIO_Init+0xd0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	4812      	ldr	r0, [pc, #72]	; (800126c <MX_GPIO_Init+0xd4>)
 8001224:	f000 fc36 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <MX_GPIO_Init+0xd8>)
 8001240:	f000 fa94 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001244:	2320      	movs	r3, #32
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_GPIO_Init+0xd4>)
 800125c:	f000 fa86 	bl	800176c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020800 	.word	0x40020800

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_MspInit+0x4c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012be:	2007      	movs	r0, #7
 80012c0:	f000 fa20 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_I2C_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12c      	bne.n	800134c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_I2C_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_I2C_MspInit+0x88>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800130e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001320:	2304      	movs	r3, #4
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <HAL_I2C_MspInit+0x8c>)
 800132c:	f000 fa1e 	bl	800176c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_I2C_MspInit+0x88>)
 800133a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40005400 	.word	0x40005400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_UART_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_UART_MspInit+0x88>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_UART_MspInit+0x8c>)
 80013d6:	f000 f9c9 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f890 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800146e:	490e      	ldr	r1, [pc, #56]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001484:	4c0b      	ldr	r4, [pc, #44]	; (80014b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001492:	f7ff ffd7 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f002 fb89 	bl	8003bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff fda3 	bl	8000fe4 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014ac:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 80014b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b4:	200000e8 	.word	0x200000e8

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_Init+0x40>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_Init+0x40>)
 80014d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x40>)
 80014de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f90d 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fec6 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f917 	bl	8001752 <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f8ed 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	200000e4 	.word	0x200000e4

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200000e4 	.word	0x200000e4

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff47 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff5c 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff8e 	bl	8001658 <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffb0 	bl	80016c0 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e165      	b.n	8001a54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8154 	bne.w	8001a4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d005      	beq.n	80017be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d130      	bne.n	8001820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b03      	cmp	r3, #3
 800182a:	d017      	beq.n	800185c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80ae 	beq.w	8001a4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190e:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_GPIO_Init+0x308>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d025      	beq.n	8001986 <HAL_GPIO_Init+0x21a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_GPIO_Init+0x30c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01f      	beq.n	8001982 <HAL_GPIO_Init+0x216>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x310>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x212>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_GPIO_Init+0x314>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x20e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_GPIO_Init+0x318>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x20a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_GPIO_Init+0x31c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x206>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <HAL_GPIO_Init+0x320>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x202>
 800196a:	2306      	movs	r3, #6
 800196c:	e00c      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800196e:	2307      	movs	r3, #7
 8001970:	e00a      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001972:	2305      	movs	r3, #5
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001976:	2304      	movs	r3, #4
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x304>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f ae96 	bls.w	8001788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021800 	.word	0x40021800
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e12b      	b.n	8001d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fbee 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2224      	movs	r2, #36	; 0x24
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b2c:	f001 f87e 	bl	8002c2c <HAL_RCC_GetPCLK1Freq>
 8001b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a81      	ldr	r2, [pc, #516]	; (8001d3c <HAL_I2C_Init+0x274>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d807      	bhi.n	8001b4c <HAL_I2C_Init+0x84>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a80      	ldr	r2, [pc, #512]	; (8001d40 <HAL_I2C_Init+0x278>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	bf94      	ite	ls
 8001b44:	2301      	movls	r3, #1
 8001b46:	2300      	movhi	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	e006      	b.n	8001b5a <HAL_I2C_Init+0x92>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a7d      	ldr	r2, [pc, #500]	; (8001d44 <HAL_I2C_Init+0x27c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	bf94      	ite	ls
 8001b54:	2301      	movls	r3, #1
 8001b56:	2300      	movhi	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0e7      	b.n	8001d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4a78      	ldr	r2, [pc, #480]	; (8001d48 <HAL_I2C_Init+0x280>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0c9b      	lsrs	r3, r3, #18
 8001b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_I2C_Init+0x274>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d802      	bhi.n	8001b9c <HAL_I2C_Init+0xd4>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	e009      	b.n	8001bb0 <HAL_I2C_Init+0xe8>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_I2C_Init+0x284>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	3301      	adds	r3, #1
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	495c      	ldr	r1, [pc, #368]	; (8001d3c <HAL_I2C_Init+0x274>)
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	d819      	bhi.n	8001c04 <HAL_I2C_Init+0x13c>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e59      	subs	r1, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bde:	1c59      	adds	r1, r3, #1
 8001be0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001be4:	400b      	ands	r3, r1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00a      	beq.n	8001c00 <HAL_I2C_Init+0x138>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1e59      	subs	r1, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfe:	e051      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e04f      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d111      	bne.n	8001c30 <HAL_I2C_Init+0x168>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e58      	subs	r0, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	e012      	b.n	8001c56 <HAL_I2C_Init+0x18e>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	0099      	lsls	r1, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Init+0x196>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e022      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10e      	bne.n	8001c84 <HAL_I2C_Init+0x1bc>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1e58      	subs	r0, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	440b      	add	r3, r1
 8001c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c82:	e00f      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	6809      	ldr	r1, [r1, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6911      	ldr	r1, [r2, #16]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68d2      	ldr	r2, [r2, #12]
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	000186a0 	.word	0x000186a0
 8001d40:	001e847f 	.word	0x001e847f
 8001d44:	003d08ff 	.word	0x003d08ff
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	10624dd3 	.word	0x10624dd3

08001d50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	817b      	strh	r3, [r7, #10]
 8001d62:	460b      	mov	r3, r1
 8001d64:	813b      	strh	r3, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d6a:	f7ff fc0d 	bl	8001588 <HAL_GetTick>
 8001d6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	f040 80d9 	bne.w	8001f30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2319      	movs	r3, #25
 8001d84:	2201      	movs	r2, #1
 8001d86:	496d      	ldr	r1, [pc, #436]	; (8001f3c <HAL_I2C_Mem_Write+0x1ec>)
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fc7f 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0cc      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_I2C_Mem_Write+0x56>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e0c5      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d007      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2221      	movs	r2, #33	; 0x21
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_I2C_Mem_Write+0x1f0>)
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e0e:	88f8      	ldrh	r0, [r7, #6]
 8001e10:	893a      	ldrh	r2, [r7, #8]
 8001e12:	8979      	ldrh	r1, [r7, #10]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fab6 	bl	8002390 <I2C_RequestMemoryWrite>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d052      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e081      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fd00 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d107      	bne.n	8001e56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d11b      	bne.n	8001ed0 <HAL_I2C_Mem_Write+0x180>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d017      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1aa      	bne.n	8001e2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fcec 	bl	80028ba <I2C_WaitOnBTFFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d107      	bne.n	8001f00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e016      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	00100002 	.word	0x00100002
 8001f40:	ffff0000 	.word	0xffff0000

08001f44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	460b      	mov	r3, r1
 8001f58:	813b      	strh	r3, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f5e:	f7ff fb13 	bl	8001588 <HAL_GetTick>
 8001f62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	f040 8208 	bne.w	8002382 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2319      	movs	r3, #25
 8001f78:	2201      	movs	r2, #1
 8001f7a:	497b      	ldr	r1, [pc, #492]	; (8002168 <HAL_I2C_Mem_Read+0x224>)
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fb85 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e1fb      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_I2C_Mem_Read+0x56>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e1f4      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d007      	beq.n	8001fc0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2222      	movs	r2, #34	; 0x22
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a5b      	ldr	r2, [pc, #364]	; (800216c <HAL_I2C_Mem_Read+0x228>)
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002002:	88f8      	ldrh	r0, [r7, #6]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	8979      	ldrh	r1, [r7, #10]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4603      	mov	r3, r0
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fa52 	bl	80024bc <I2C_RequestMemoryRead>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1b0      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b00      	cmp	r3, #0
 8002028:	d113      	bne.n	8002052 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e184      	b.n	800235c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	2b01      	cmp	r3, #1
 8002058:	d11b      	bne.n	8002092 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e164      	b.n	800235c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	2b02      	cmp	r3, #2
 8002098:	d11b      	bne.n	80020d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	e144      	b.n	800235c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020e8:	e138      	b.n	800235c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	f200 80f1 	bhi.w	80022d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d123      	bne.n	8002144 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fc1b 	bl	800293c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e139      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002142:	e10b      	b.n	800235c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	2b02      	cmp	r3, #2
 800214a:	d14e      	bne.n	80021ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002152:	2200      	movs	r2, #0
 8002154:	4906      	ldr	r1, [pc, #24]	; (8002170 <HAL_I2C_Mem_Read+0x22c>)
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fa98 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e10e      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
 8002166:	bf00      	nop
 8002168:	00100002 	.word	0x00100002
 800216c:	ffff0000 	.word	0xffff0000
 8002170:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e8:	e0b8      	b.n	800235c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	2200      	movs	r2, #0
 80021f2:	4966      	ldr	r1, [pc, #408]	; (800238c <HAL_I2C_Mem_Read+0x448>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fa49 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0bf      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	2200      	movs	r2, #0
 800224e:	494f      	ldr	r1, [pc, #316]	; (800238c <HAL_I2C_Mem_Read+0x448>)
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa1b 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e091      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022d4:	e042      	b.n	800235c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fb2e 	bl	800293c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e04c      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b04      	cmp	r3, #4
 8002328:	d118      	bne.n	800235c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	f47f aec2 	bne.w	80020ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002382:	2302      	movs	r3, #2
  }
}
 8002384:	4618      	mov	r0, r3
 8002386:	3728      	adds	r7, #40	; 0x28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00010004 	.word	0x00010004

08002390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	817b      	strh	r3, [r7, #10]
 80023a2:	460b      	mov	r3, r1
 80023a4:	813b      	strh	r3, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f960 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e0:	d103      	bne.n	80023ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e05f      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ee:	897b      	ldrh	r3, [r7, #10]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	492d      	ldr	r1, [pc, #180]	; (80024b8 <I2C_RequestMemoryWrite+0x128>)
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f998 	bl	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e04c      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	6a39      	ldr	r1, [r7, #32]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fa02 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b04      	cmp	r3, #4
 8002440:	d107      	bne.n	8002452 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e02b      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800245c:	893b      	ldrh	r3, [r7, #8]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	611a      	str	r2, [r3, #16]
 8002466:	e021      	b.n	80024ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002468:	893b      	ldrh	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	6a39      	ldr	r1, [r7, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f9dc 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b04      	cmp	r3, #4
 800248c:	d107      	bne.n	800249e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e005      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024a2:	893b      	ldrh	r3, [r7, #8]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	00010002 	.word	0x00010002

080024bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
 80024ce:	460b      	mov	r3, r1
 80024d0:	813b      	strh	r3, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f8c2 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251c:	d103      	bne.n	8002526 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0aa      	b.n	8002680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800252a:	897b      	ldrh	r3, [r7, #10]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	4952      	ldr	r1, [pc, #328]	; (8002688 <I2C_RequestMemoryRead+0x1cc>)
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f8fa 	bl	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e097      	b.n	8002680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	6a39      	ldr	r1, [r7, #32]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f964 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b04      	cmp	r3, #4
 800257c:	d107      	bne.n	800258e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e076      	b.n	8002680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002598:	893b      	ldrh	r3, [r7, #8]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	611a      	str	r2, [r3, #16]
 80025a2:	e021      	b.n	80025e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025a4:	893b      	ldrh	r3, [r7, #8]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	6a39      	ldr	r1, [r7, #32]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f93e 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00d      	beq.n	80025de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d107      	bne.n	80025da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e050      	b.n	8002680 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025de:	893b      	ldrh	r3, [r7, #8]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f923 	bl	8002838 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e035      	b.n	8002680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002622:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	2200      	movs	r2, #0
 800262c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f82b 	bl	800268c <I2C_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264a:	d103      	bne.n	8002654 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e013      	b.n	8002680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002658:	897b      	ldrh	r3, [r7, #10]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	4906      	ldr	r1, [pc, #24]	; (8002688 <I2C_RequestMemoryRead+0x1cc>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f863 	bl	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	00010002 	.word	0x00010002

0800268c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269c:	e025      	b.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d021      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7fe ff6f 	bl	8001588 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d302      	bcc.n	80026bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d116      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e023      	b.n	8002732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10d      	bne.n	8002710 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	e00c      	b.n	800272a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4013      	ands	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	429a      	cmp	r2, r3
 800272e:	d0b6      	beq.n	800269e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002748:	e051      	b.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002758:	d123      	bne.n	80027a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e046      	b.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d021      	beq.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7fe feed 	bl	8001588 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0220 	orr.w	r2, r3, #32
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e020      	b.n	8002830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10c      	bne.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e00b      	b.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	43da      	mvns	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d18d      	bne.n	800274a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002844:	e02d      	b.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f8ce 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e02d      	b.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285c:	d021      	beq.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7fe fe93 	bl	8001588 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d116      	bne.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e007      	b.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d1ca      	bne.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c6:	e02d      	b.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f88d 	bl	80029e8 <I2C_IsAcknowledgeFailed>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e02d      	b.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d021      	beq.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e0:	f7fe fe52 	bl	8001588 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d302      	bcc.n	80028f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e007      	b.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b04      	cmp	r3, #4
 8002930:	d1ca      	bne.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002948:	e042      	b.n	80029d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b10      	cmp	r3, #16
 8002956:	d119      	bne.n	800298c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0210 	mvn.w	r2, #16
 8002960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e029      	b.n	80029e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7fe fdfc 	bl	8001588 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e007      	b.n	80029e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d1b5      	bne.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fe:	d11b      	bne.n	8002a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d90c      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0b8      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a58      	ldr	r2, [pc, #352]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab4:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d044      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d119      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e07f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e06f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e067      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4934      	ldr	r1, [pc, #208]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fd26 	bl	8001588 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fd22 	bl	8001588 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e04f      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d20c      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e032      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4916      	ldr	r1, [pc, #88]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	490e      	ldr	r1, [pc, #56]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bce:	f000 f855 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490a      	ldr	r1, [pc, #40]	; (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fc86 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00
 8002c04:	40023800 	.word	0x40023800
 8002c08:	08003c0c 	.word	0x08003c0c
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000004 	.word	0x20000004

08002c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000000 	.word	0x20000000

08002c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c30:	f7ff fff0 	bl	8002c14 <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0a9b      	lsrs	r3, r3, #10
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	08003c1c 	.word	0x08003c1c

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c58:	f7ff ffdc 	bl	8002c14 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0b5b      	lsrs	r3, r3, #13
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	08003c1c 	.word	0x08003c1c

08002c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c80:	b0ae      	sub	sp, #184	; 0xb8
 8002c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca2:	4bcb      	ldr	r3, [pc, #812]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	f200 8206 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x440>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002ced 	.word	0x08002ced
 8002cbc:	080030bd 	.word	0x080030bd
 8002cc0:	080030bd 	.word	0x080030bd
 8002cc4:	080030bd 	.word	0x080030bd
 8002cc8:	08002cf5 	.word	0x08002cf5
 8002ccc:	080030bd 	.word	0x080030bd
 8002cd0:	080030bd 	.word	0x080030bd
 8002cd4:	080030bd 	.word	0x080030bd
 8002cd8:	08002cfd 	.word	0x08002cfd
 8002cdc:	080030bd 	.word	0x080030bd
 8002ce0:	080030bd 	.word	0x080030bd
 8002ce4:	080030bd 	.word	0x080030bd
 8002ce8:	08002eed 	.word	0x08002eed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4bb9      	ldr	r3, [pc, #740]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cf2:	e1e7      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf4:	4bb8      	ldr	r3, [pc, #736]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cfa:	e1e3      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cfc:	4bb4      	ldr	r3, [pc, #720]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d08:	4bb1      	ldr	r3, [pc, #708]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d071      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d14:	4bae      	ldr	r3, [pc, #696]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4621      	mov	r1, r4
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	6439      	str	r1, [r7, #64]	; 0x40
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4641      	mov	r1, r8
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4641      	mov	r1, r8
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	1a51      	subs	r1, r2, r1
 8002d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d80:	4649      	mov	r1, r9
 8002d82:	eb63 0301 	sbc.w	r3, r3, r1
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d94:	4649      	mov	r1, r9
 8002d96:	00cb      	lsls	r3, r1, #3
 8002d98:	4641      	mov	r1, r8
 8002d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9e:	4641      	mov	r1, r8
 8002da0:	00ca      	lsls	r2, r1, #3
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	4622      	mov	r2, r4
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
 8002dae:	462b      	mov	r3, r5
 8002db0:	460a      	mov	r2, r1
 8002db2:	eb42 0303 	adc.w	r3, r2, r3
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	024b      	lsls	r3, r1, #9
 8002dc8:	4621      	mov	r1, r4
 8002dca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dce:	4621      	mov	r1, r4
 8002dd0:	024a      	lsls	r2, r1, #9
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002de4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002de8:	f7fd fe2c 	bl	8000a44 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df6:	e067      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df8:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e12:	2300      	movs	r3, #0
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	0159      	lsls	r1, r3, #5
 8002e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2c:	0150      	lsls	r0, r2, #5
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4621      	mov	r1, r4
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e38:	4629      	mov	r1, r5
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	018b      	lsls	r3, r1, #6
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e56:	4641      	mov	r1, r8
 8002e58:	018a      	lsls	r2, r1, #6
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e60:	4649      	mov	r1, r9
 8002e62:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7a:	4692      	mov	sl, r2
 8002e7c:	469b      	mov	fp, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	eb1a 0303 	adds.w	r3, sl, r3
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	462b      	mov	r3, r5
 8002e88:	eb4b 0303 	adc.w	r3, fp, r3
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8002eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8002eb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002eba:	f7fd fdc3 	bl	8000a44 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eea:	e0eb      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d06b      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	663b      	str	r3, [r7, #96]	; 0x60
 8002f18:	2300      	movs	r3, #0
 8002f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f20:	4622      	mov	r2, r4
 8002f22:	462b      	mov	r3, r5
 8002f24:	f04f 0000 	mov.w	r0, #0
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	0159      	lsls	r1, r3, #5
 8002f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f32:	0150      	lsls	r0, r2, #5
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4621      	mov	r1, r4
 8002f3a:	1a51      	subs	r1, r2, r1
 8002f3c:	61b9      	str	r1, [r7, #24]
 8002f3e:	4629      	mov	r1, r5
 8002f40:	eb63 0301 	sbc.w	r3, r3, r1
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f52:	4659      	mov	r1, fp
 8002f54:	018b      	lsls	r3, r1, #6
 8002f56:	4651      	mov	r1, sl
 8002f58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	018a      	lsls	r2, r1, #6
 8002f60:	4651      	mov	r1, sl
 8002f62:	ebb2 0801 	subs.w	r8, r2, r1
 8002f66:	4659      	mov	r1, fp
 8002f68:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	4623      	mov	r3, r4
 8002f86:	eb18 0303 	adds.w	r3, r8, r3
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	eb49 0303 	adc.w	r3, r9, r3
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	024b      	lsls	r3, r1, #9
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002faa:	4621      	mov	r1, r4
 8002fac:	024a      	lsls	r2, r1, #9
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc0:	f7fd fd40 	bl	8000a44 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fce:	e065      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x420>
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fec:	653b      	str	r3, [r7, #80]	; 0x50
 8002fee:	2300      	movs	r3, #0
 8002ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ff6:	4642      	mov	r2, r8
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	f04f 0000 	mov.w	r0, #0
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003008:	0150      	lsls	r0, r2, #5
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4641      	mov	r1, r8
 8003010:	1a51      	subs	r1, r2, r1
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	4649      	mov	r1, r9
 8003016:	eb63 0301 	sbc.w	r3, r3, r1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003028:	4659      	mov	r1, fp
 800302a:	018b      	lsls	r3, r1, #6
 800302c:	4651      	mov	r1, sl
 800302e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003032:	4651      	mov	r1, sl
 8003034:	018a      	lsls	r2, r1, #6
 8003036:	4651      	mov	r1, sl
 8003038:	1a54      	subs	r4, r2, r1
 800303a:	4659      	mov	r1, fp
 800303c:	eb63 0501 	sbc.w	r5, r3, r1
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	00eb      	lsls	r3, r5, #3
 800304a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304e:	00e2      	lsls	r2, r4, #3
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	4643      	mov	r3, r8
 8003056:	18e3      	adds	r3, r4, r3
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	464b      	mov	r3, r9
 800305c:	eb45 0303 	adc.w	r3, r5, r3
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003084:	2200      	movs	r2, #0
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
 8003088:	64fa      	str	r2, [r7, #76]	; 0x4c
 800308a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800308e:	f7fd fcd9 	bl	8000a44 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4613      	mov	r3, r2
 8003098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	0f1b      	lsrs	r3, r3, #28
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030ba:	e003      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	37b8      	adds	r7, #184	; 0xb8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	00f42400 	.word	0x00f42400

080030dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e28d      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8083 	beq.w	8003202 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030fc:	4b94      	ldr	r3, [pc, #592]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d019      	beq.n	800313c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003108:	4b91      	ldr	r3, [pc, #580]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003110:	2b08      	cmp	r3, #8
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003114:	4b8e      	ldr	r3, [pc, #568]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d00c      	beq.n	800313c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d112      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4b84      	ldr	r3, [pc, #528]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05b      	beq.n	8003200 <HAL_RCC_OscConfig+0x124>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d157      	bne.n	8003200 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e25a      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x90>
 800315e:	4b7c      	ldr	r3, [pc, #496]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7b      	ldr	r2, [pc, #492]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0xb4>
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a75      	ldr	r2, [pc, #468]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a72      	ldr	r2, [pc, #456]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6b      	ldr	r2, [pc, #428]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe f9ea 	bl	8001588 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe f9e6 	bl	8001588 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e21f      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b61      	ldr	r3, [pc, #388]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xdc>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f9d6 	bl	8001588 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe f9d2 	bl	8001588 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e20b      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x104>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06f      	beq.n	80032ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800320e:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d017      	beq.n	800324a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d105      	bne.n	8003232 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d11c      	bne.n	8003278 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x186>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1d3      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4937      	ldr	r1, [pc, #220]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	e03a      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_OscConfig+0x278>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe f97f 	bl	8001588 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe f97b 	bl	8001588 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e1b4      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4925      	ldr	r1, [pc, #148]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x278>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe f95e 	bl	8001588 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d0:	f7fe f95a 	bl	8001588 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e193      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d036      	beq.n	8003368 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_RCC_OscConfig+0x27c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe f93e 	bl	8001588 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003310:	f7fe f93a 	bl	8001588 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e173      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x234>
 800332e:	e01b      	b.n	8003368 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x27c>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe f927 	bl	8001588 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	e00e      	b.n	800335c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe f923 	bl	8001588 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d907      	bls.n	800335c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e15c      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
 8003350:	40023800 	.word	0x40023800
 8003354:	42470000 	.word	0x42470000
 8003358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b8a      	ldr	r3, [pc, #552]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ea      	bne.n	800333e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8097 	beq.w	80034a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b83      	ldr	r3, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b7c      	ldr	r3, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b79      	ldr	r3, [pc, #484]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fe f8e3 	bl	8001588 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7fe f8df 	bl	8001588 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e118      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x31e>
 80033ec:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	e01c      	b.n	8003434 <HAL_RCC_OscConfig+0x358>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x340>
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a60      	ldr	r2, [pc, #384]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a5d      	ldr	r2, [pc, #372]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6713      	str	r3, [r2, #112]	; 0x70
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0x358>
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a56      	ldr	r2, [pc, #344]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe f8a4 	bl	8001588 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fe f8a0 	bl	8001588 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0d7      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345a:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ee      	beq.n	8003444 <HAL_RCC_OscConfig+0x368>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe f88e 	bl	8001588 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe f88a 	bl	8001588 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0c1      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003486:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1ee      	bne.n	8003470 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003498:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80ad 	beq.w	8003608 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d060      	beq.n	800357c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d145      	bne.n	800354e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f85e 	bl	8001588 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe f85a 	bl	8001588 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e093      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	491b      	ldr	r1, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe f82f 	bl	8001588 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe f82b 	bl	8001588 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e064      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x452>
 800354c:	e05c      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe f818 	bl	8001588 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe f814 	bl	8001588 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e04d      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x480>
 800357a:	e045      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e040      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
 8003588:	40023800 	.word	0x40023800
 800358c:	40007000 	.word	0x40007000
 8003590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <HAL_RCC_OscConfig+0x538>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d030      	beq.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d129      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d122      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d119      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d10f      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e03f      	b.n	80036aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fe8e 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	; 0x24
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800365a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f829 	bl	80036b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b8:	b0c0      	sub	sp, #256	; 0x100
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	ea40 0301 	orr.w	r3, r0, r1
 80036dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800370c:	f021 010c 	bic.w	r1, r1, #12
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800371a:	430b      	orrs	r3, r1
 800371c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	6999      	ldr	r1, [r3, #24]
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	ea40 0301 	orr.w	r3, r0, r1
 800373a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b8f      	ldr	r3, [pc, #572]	; (8003980 <UART_SetConfig+0x2cc>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d005      	beq.n	8003754 <UART_SetConfig+0xa0>
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b8d      	ldr	r3, [pc, #564]	; (8003984 <UART_SetConfig+0x2d0>)
 8003750:	429a      	cmp	r2, r3
 8003752:	d104      	bne.n	800375e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7ff fa7e 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 8003758:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800375c:	e003      	b.n	8003766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800375e:	f7ff fa65 	bl	8002c2c <HAL_RCC_GetPCLK1Freq>
 8003762:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003770:	f040 810c 	bne.w	800398c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003778:	2200      	movs	r2, #0
 800377a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800377e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003786:	4622      	mov	r2, r4
 8003788:	462b      	mov	r3, r5
 800378a:	1891      	adds	r1, r2, r2
 800378c:	65b9      	str	r1, [r7, #88]	; 0x58
 800378e:	415b      	adcs	r3, r3
 8003790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003796:	4621      	mov	r1, r4
 8003798:	eb12 0801 	adds.w	r8, r2, r1
 800379c:	4629      	mov	r1, r5
 800379e:	eb43 0901 	adc.w	r9, r3, r1
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037b6:	4690      	mov	r8, r2
 80037b8:	4699      	mov	r9, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	eb18 0303 	adds.w	r3, r8, r3
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037c4:	462b      	mov	r3, r5
 80037c6:	eb49 0303 	adc.w	r3, r9, r3
 80037ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037e2:	460b      	mov	r3, r1
 80037e4:	18db      	adds	r3, r3, r3
 80037e6:	653b      	str	r3, [r7, #80]	; 0x50
 80037e8:	4613      	mov	r3, r2
 80037ea:	eb42 0303 	adc.w	r3, r2, r3
 80037ee:	657b      	str	r3, [r7, #84]	; 0x54
 80037f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037f8:	f7fd f924 	bl	8000a44 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4b61      	ldr	r3, [pc, #388]	; (8003988 <UART_SetConfig+0x2d4>)
 8003802:	fba3 2302 	umull	r2, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	011c      	lsls	r4, r3, #4
 800380a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800380e:	2200      	movs	r2, #0
 8003810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003814:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800381c:	4642      	mov	r2, r8
 800381e:	464b      	mov	r3, r9
 8003820:	1891      	adds	r1, r2, r2
 8003822:	64b9      	str	r1, [r7, #72]	; 0x48
 8003824:	415b      	adcs	r3, r3
 8003826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800382c:	4641      	mov	r1, r8
 800382e:	eb12 0a01 	adds.w	sl, r2, r1
 8003832:	4649      	mov	r1, r9
 8003834:	eb43 0b01 	adc.w	fp, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800384c:	4692      	mov	sl, r2
 800384e:	469b      	mov	fp, r3
 8003850:	4643      	mov	r3, r8
 8003852:	eb1a 0303 	adds.w	r3, sl, r3
 8003856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800385a:	464b      	mov	r3, r9
 800385c:	eb4b 0303 	adc.w	r3, fp, r3
 8003860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003870:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003878:	460b      	mov	r3, r1
 800387a:	18db      	adds	r3, r3, r3
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
 800387e:	4613      	mov	r3, r2
 8003880:	eb42 0303 	adc.w	r3, r2, r3
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
 8003886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800388a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800388e:	f7fd f8d9 	bl	8000a44 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4611      	mov	r1, r2
 8003898:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <UART_SetConfig+0x2d4>)
 800389a:	fba3 2301 	umull	r2, r3, r3, r1
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2264      	movs	r2, #100	; 0x64
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	1acb      	subs	r3, r1, r3
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038ae:	4b36      	ldr	r3, [pc, #216]	; (8003988 <UART_SetConfig+0x2d4>)
 80038b0:	fba3 2302 	umull	r2, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038bc:	441c      	add	r4, r3
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038d8:	415b      	adcs	r3, r3
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038e0:	4641      	mov	r1, r8
 80038e2:	1851      	adds	r1, r2, r1
 80038e4:	6339      	str	r1, [r7, #48]	; 0x30
 80038e6:	4649      	mov	r1, r9
 80038e8:	414b      	adcs	r3, r1
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038f8:	4659      	mov	r1, fp
 80038fa:	00cb      	lsls	r3, r1, #3
 80038fc:	4651      	mov	r1, sl
 80038fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003902:	4651      	mov	r1, sl
 8003904:	00ca      	lsls	r2, r1, #3
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	4603      	mov	r3, r0
 800390c:	4642      	mov	r2, r8
 800390e:	189b      	adds	r3, r3, r2
 8003910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003914:	464b      	mov	r3, r9
 8003916:	460a      	mov	r2, r1
 8003918:	eb42 0303 	adc.w	r3, r2, r3
 800391c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800392c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003934:	460b      	mov	r3, r1
 8003936:	18db      	adds	r3, r3, r3
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
 800393a:	4613      	mov	r3, r2
 800393c:	eb42 0303 	adc.w	r3, r2, r3
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800394a:	f7fd f87b 	bl	8000a44 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <UART_SetConfig+0x2d4>)
 8003954:	fba3 1302 	umull	r1, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2164      	movs	r1, #100	; 0x64
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	3332      	adds	r3, #50	; 0x32
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <UART_SetConfig+0x2d4>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	f003 0207 	and.w	r2, r3, #7
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4422      	add	r2, r4
 800397a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800397c:	e106      	b.n	8003b8c <UART_SetConfig+0x4d8>
 800397e:	bf00      	nop
 8003980:	40011000 	.word	0x40011000
 8003984:	40011400 	.word	0x40011400
 8003988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800399a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800399e:	4642      	mov	r2, r8
 80039a0:	464b      	mov	r3, r9
 80039a2:	1891      	adds	r1, r2, r2
 80039a4:	6239      	str	r1, [r7, #32]
 80039a6:	415b      	adcs	r3, r3
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ae:	4641      	mov	r1, r8
 80039b0:	1854      	adds	r4, r2, r1
 80039b2:	4649      	mov	r1, r9
 80039b4:	eb43 0501 	adc.w	r5, r3, r1
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	00eb      	lsls	r3, r5, #3
 80039c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c6:	00e2      	lsls	r2, r4, #3
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	4643      	mov	r3, r8
 80039ce:	18e3      	adds	r3, r4, r3
 80039d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039d4:	464b      	mov	r3, r9
 80039d6:	eb45 0303 	adc.w	r3, r5, r3
 80039da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039fa:	4629      	mov	r1, r5
 80039fc:	008b      	lsls	r3, r1, #2
 80039fe:	4621      	mov	r1, r4
 8003a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a04:	4621      	mov	r1, r4
 8003a06:	008a      	lsls	r2, r1, #2
 8003a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a0c:	f7fd f81a 	bl	8000a44 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4b60      	ldr	r3, [pc, #384]	; (8003b98 <UART_SetConfig+0x4e4>)
 8003a16:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	011c      	lsls	r4, r3, #4
 8003a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	61b9      	str	r1, [r7, #24]
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a40:	4641      	mov	r1, r8
 8003a42:	1851      	adds	r1, r2, r1
 8003a44:	6139      	str	r1, [r7, #16]
 8003a46:	4649      	mov	r1, r9
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a58:	4659      	mov	r1, fp
 8003a5a:	00cb      	lsls	r3, r1, #3
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a62:	4651      	mov	r1, sl
 8003a64:	00ca      	lsls	r2, r1, #3
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a98:	4649      	mov	r1, r9
 8003a9a:	008b      	lsls	r3, r1, #2
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	008a      	lsls	r2, r1, #2
 8003aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aaa:	f7fc ffcb 	bl	8000a44 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2264      	movs	r2, #100	; 0x64
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	1acb      	subs	r3, r1, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	; 0x32
 8003ac8:	4a33      	ldr	r2, [pc, #204]	; (8003b98 <UART_SetConfig+0x4e4>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad4:	441c      	add	r4, r3
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	673b      	str	r3, [r7, #112]	; 0x70
 8003ade:	677a      	str	r2, [r7, #116]	; 0x74
 8003ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	415b      	adcs	r3, r3
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af4:	4641      	mov	r1, r8
 8003af6:	1851      	adds	r1, r2, r1
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	4649      	mov	r1, r9
 8003afc:	414b      	adcs	r3, r1
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	00cb      	lsls	r3, r1, #3
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b16:	4651      	mov	r1, sl
 8003b18:	00ca      	lsls	r2, r1, #3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4642      	mov	r2, r8
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b26:	464b      	mov	r3, r9
 8003b28:	460a      	mov	r2, r1
 8003b2a:	eb42 0303 	adc.w	r3, r2, r3
 8003b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3a:	667a      	str	r2, [r7, #100]	; 0x64
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b48:	4649      	mov	r1, r9
 8003b4a:	008b      	lsls	r3, r1, #2
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b52:	4641      	mov	r1, r8
 8003b54:	008a      	lsls	r2, r1, #2
 8003b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b5a:	f7fc ff73 	bl	8000a44 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <UART_SetConfig+0x4e4>)
 8003b64:	fba3 1302 	umull	r1, r3, r3, r2
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	2164      	movs	r1, #100	; 0x64
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	3332      	adds	r3, #50	; 0x32
 8003b76:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <UART_SetConfig+0x4e4>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4422      	add	r2, r4
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b98:	51eb851f 	.word	0x51eb851f

08003b9c <memset>:
 8003b9c:	4402      	add	r2, r0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <__libc_init_array>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	4d0d      	ldr	r5, [pc, #52]	; (8003be4 <__libc_init_array+0x38>)
 8003bb0:	4c0d      	ldr	r4, [pc, #52]	; (8003be8 <__libc_init_array+0x3c>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	42a6      	cmp	r6, r4
 8003bba:	d109      	bne.n	8003bd0 <__libc_init_array+0x24>
 8003bbc:	4d0b      	ldr	r5, [pc, #44]	; (8003bec <__libc_init_array+0x40>)
 8003bbe:	4c0c      	ldr	r4, [pc, #48]	; (8003bf0 <__libc_init_array+0x44>)
 8003bc0:	f000 f818 	bl	8003bf4 <_init>
 8003bc4:	1b64      	subs	r4, r4, r5
 8003bc6:	10a4      	asrs	r4, r4, #2
 8003bc8:	2600      	movs	r6, #0
 8003bca:	42a6      	cmp	r6, r4
 8003bcc:	d105      	bne.n	8003bda <__libc_init_array+0x2e>
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd4:	4798      	blx	r3
 8003bd6:	3601      	adds	r6, #1
 8003bd8:	e7ee      	b.n	8003bb8 <__libc_init_array+0xc>
 8003bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bde:	4798      	blx	r3
 8003be0:	3601      	adds	r6, #1
 8003be2:	e7f2      	b.n	8003bca <__libc_init_array+0x1e>
 8003be4:	08003c2c 	.word	0x08003c2c
 8003be8:	08003c2c 	.word	0x08003c2c
 8003bec:	08003c2c 	.word	0x08003c2c
 8003bf0:	08003c30 	.word	0x08003c30

08003bf4 <_init>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr

08003c00 <_fini>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr
